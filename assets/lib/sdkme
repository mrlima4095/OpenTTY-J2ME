--[[

[ Config ]

name=SmartME
version=1.1
description=OpenTTY Toolkit

api.version=1.16
api.error=execute log add error SmartME requires OpenTTY 1.16 or newer; echo [ SmartME ] Required OpenTTY 1.16 or newer;
api.match=minimum

include=forge

config=execute set SDK=1.1;
command=sdk

sdk=execute x11 list /home/sdkme; true

shell.name=sdk
shell.args=setxback,libget

setxback=execute alias xterm=exec sdk & unalias xterm;
libget=exec case alias (yang) execute set RESOURCE=math.lua; yang install; set RESOURCE=graphics.lua; yang install; warn Lua libraries downloaded!; false & import /java/lib/yang & sdk libget & true

Nano Editor=execute nano; sdk setxback;
New Project=execute install nano; touch; add list.title=New Project; add list.content=Lua Source code,OpenTTY Packages; add list.back=execute sdk; add Lua Source code=exec touch & add print("Hello World") & nano & sdk setxback; add OpenTTY Packages=exec forge gen; x11 list nano; get nano;
Save Project=execute x11 quest /home/sdkme;
File Explorer=execute dir; sdk setxback;
Build (from nano)=execute time lua nano;
Download Libraries=execute sdk; sdk libget;
Documentation=exec sdk setxback & view <title>SmartME Docs</title>\n\n\tLua is a lightweight, high-level programming language designed for embedded use in applications. It was created in Brazil in the early 1990s by Roberto Ierusalimschy, Luiz Henrique de Figueiredo, and Waldemar Celes. Lua is known for its simple syntax, small size, and speed, making it ideal for use in game development, embedded systems, and applications that require a scripting language. It supports procedural programming, object-oriented programming, functional programming, and data-driven programming. One of Luaâ€™s key features is its ability to be easily integrated with other programming languages, especially C and C++, allowing developers to extend applications with custom functionality. Lua is widely used in game engines like Roblox, World of Warcraft, and Adobe Lightroom for scripting purposes.
Update SDK=execute sdk; install /home/nano; tick Downloading...; proxy raw.githubusercontent.com/mrlima4095/OpenTTY-J2ME/main/assets/lib/sdkme; install /home/sdkme; get nano; import /home/sdkme; tick; sdk; warn SmartME was installed the latest version from GitHub;
About=execute sdk; warn SmartME $SDK\nOpenTTY Toolkit;


]]

local app = {
    version = "1.2",
    mirror = os.getenv("$REPO") or "opentty.xyz:31523"

    xcfg = {
        title = "SmartME SDK",
        back = { root = os.exit },
        button = {
            label = "Select",
            root = app.handler
        },

        fields = {
            "Nano Editor",
            "---",
            "New",
            "Save",
            "File Explorer",
            "Build Project",
            "---",
            "Download Libraries",
            "Documentation",
            "About"
        }
    }
}

function app.new()
    graphics.display(graphics.BuildList({
        title = "SmartME - New",
        back = { root = app.main },
        button = {
            label = "Create",
            root = function (option)
                if option == "Lua source code" then
                    os.execute('execute install nano; touch; add -- Lua J2ME\n\nprint(Hello, world!)')
                    os.execute("nano") os.exit()
                else
                    if string.hash(io.read()) == -1512329552 then os.execute("execute import forge; forge gen; true") os.exit()
                    else
                        graphics.display(graphics.Alert({
                            title = "SmartME",
                            message = "To Generate an OpenTTY Package Project requires Forge 1.2 installed!",
                            back = app.new,
                            button = {
                                label = "Install",
                                root = function()
                                    local conn, i, o = socket.connect("socket://" .. app.mirror)
                                    
                                    io.write("get lib/forge", o)
                                    local forge = io.read(i)

                                    if string.hash(forge) == -1512329552 then
                                        io.write(forge, "/home/forge")
                                        os.execute("execute import forge; forge gen; true")
                                        os.exit()
                                    else
                                        graphics.display(graphics.Alert({
                                            title = "SmartME",
                                            message = "Forge installation failed!",
                                            back = { root = app.new }
                                        }))
                                    end

                                    io.close(conn) io.close(i) io close(o)
                                end
                            }
                        }))
                    end
                end
            end
        },

        fields = { "Lua source code", "OpenTTY Package" }
    }))
end
function app.save() end
function app.pkg() end

function app.handler(option)
    if option == "Nano Editor" then os.execute("nano") os.exit()
    elseif option == "---" then app.main()
    elseif option == "New" then app.new()
    elseif option == "Save" then app.save()
    elseif option == "File Explorer" then os.execute("dir") os.exit()
    elseif option == "Build Project" then os.execute("lua") os.exit()
    elseif option == "Download Libraries" then app.pkg()
    elseif option == "Documentation" then os.exit()
    elseif option == "About" then
        graphics.display(graphics.Alert({
            title = "SmartME SDK",
            message = "SmartME " .. app.version,
            back = { root = app.main },
            button = {
                label = "Update",
                root = function()
                    local conn, i, o = socket.connect("socket://" .. app.mirror)

                    io.write("get lib/sdkme", o)
                    local sdkme = io.read(i)

                    io.close(conn) io.close(i) io close(o)

                    if string.hash(io.read("/home/sdkme")) == string.hash(sdkme) then
                        graphics.display(graphics.Alert({
                            title = "SmartME",
                            message = "SmartME is already updated!",
                            back = { root = function() app.handler("About") end }
                        }))
                    else 
                        io.write(sdkme, "/home/sdkme")
                        graphics.display(graphics.Alert({
                            title = "SmartME",
                            message = "SmartME have been updated!",
                            back = {
                                label = "Reload",
                                root = function()
                                    os.execute("lua /home/sdkme")
                                    os.exit()
                                end
                            }
                        }))
                    end
                end
            }
        }))
    end
end


function app.main()
    if app.menu == nil then app.menu = graphics.BuildList(app.xcfg) end

    graphics.display(app.menu)
end


os.setproc("name", "sdkme")
app.main()