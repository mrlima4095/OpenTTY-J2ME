<index>
OpenTTY $VERSION - $PATCH
Copyright (C) 2025 - Mr. Lima


[ GitHub Repository ]
https://github.com/mrlima4095/OpenTTY-J2ME
</index>

<about>
Usage: about [FILE]
* Print information about FILE if it is a Package.
</about>
<add>
Usage: add [TEXT]
* Add TEXT in nano buffer, without TEXT add a line break.
</add>
<alias>
Usage: alias [KEY]=[COMMAND]
* Manage MIDlet aliases.

	Without arguments, 'alias' prints the list of aliases;
	Otherwise, an alias is defined for each KEY whose COMMAND is given;
	When only KEY is found and it is an alias prints it value.
</alias>
<basename>
Usage: basename [PATH]
* Print PATH with any leading directory components removed.
</basename>
<bg>
Usage: bg [COMMAND]
* Run COMMAND in Background.
</bg>
<bind>
Usage: bind [PORT]
* Remote Shell server

	Listen at PORT for connections, without PORT take from environment key.
	Connect into 
</bind>
<bruteforce>
Usage: bruteforce [COMMAND]
* Run COMMAND while process 'bruteforce' is alive.

	When process 'bruteforce' die, all instances of it stops.
	Use command 'kill [PID]' or 'stop bruteforce' to kill it. 
</bruteforce>
<buff>
Usage: buff [TEXT]
* Set content of standard input (stdin) as TEXT.
</buff>on
<build>
Usage: build
* Print MIDlet build code.
</build>
<builtin>
Usage: builtin [COMMAND]
* Run COMMAND bypassing aliases.
</builtin>
<call>
Usage: call [PHONE]
* Request Device API make a call to PHONE number
</call>
<case>
Usage: case [TYPE] ([NAME]) [COMMAND]
* Look for NAME in context of TYPE. If found, run COMMAND.

	Put '!' as prefix in TYPE to invert the operation.

Valid TYPE's:
- alias - file - key - root
- screen - thread - trace
</case>
<cat>
Usage: cat [FILE]
* Print content of FILE.
</cat>
<cd>
Usage: cd [PATH]
* Change current directory to PATH;

	Without PATH return to path '/home/'.
	See also help page 'lsblk' to read about mount points.
</cd>
<chmod>
Usage: chmod [NODE]
* Request Device API looking for Permission NODE;

	Log NODE status into MIDlet Logs.

Permission NODE's:
- http - socket - file - prg
</chmod>
<clear>
Usage: clear [PAGE]
* Clear PAGE content;

	Without PAGE, clear console (stdout).

MIDlet PAGE's:
- stdin - stdout - history - logs
</clear>
<clone>
Usage: clone [URL]
* Make a HTTP GET request in URL and run response as script.

	This command uses MIDlet-Proxy by default. Some J2ME Devices don't have support for certificates and without this cannot connect directly in a HTTPS server. 
</clone>
<conf>
Usage: conf [FILE]
* Prints FILE in INI format;

	Parsing only works if source FILE is in Json format.
</conf>
<cp>
Usage: cp [SOURCE] [COPY]
* Make a copy of SOURCE.

	Copy SOURCE into COPY;
	Without COPY the new FILE name is 'SOURCE-copy'.
</cp>
<cron>
Usage: cron [TIME] [COMMAND]
* Wait TIME before run COMMAND.
</cron>
<curl>
Usage: curl [URL]
* Make a HTTP GET request in URL and print response.
</curl>
<date>
Usage: date
* Print Device date and time.
</date>
<debug>
Usage: debug
* Run MIDlet debug script.
</debug>
<dir>
Usage: dir [OPTIONS]
* Print FILES of current directory.

OPTIONS:
	-a	Include hidden files in listing;
	-v	Prints listing when you're in home.

	If you're in home directory it open File Explorer.
</dir>
<du>
Usage: du [FILE]
* Print length (in Bytes) of FILE.
</du>
<echo>
Usage: echo [TEXT]
* Print TEXT, without TEXT prints a line break.
</echo>
<env>
Usage: env [KEY]
* Print VALUE of KEY, without KEY list all environment keys.
</env>
<exec>
Usage: exec [COMMAND &]
* Run more then one command in a process.

	Split COMMAND's by char '&'.
</exec>
<execute>
</execute>
<exit>
Usage: exit
* Close MIDlet.
</exit>
<expr>
Usage: expr [EXPRESSION]
* Perform a math EXPRESSION and print it result.
</expr>
<export>
Usage: export [KEY]
* Clear VALUE of KEY, without KEY list all environment keys.
</export>
<false>
Usage: false [TEXT]
* Do anything, return false.
</false>
<find>
Usage: find [FILE] [PATTERN]
* Search PATTERN in FILE, print VALUE in standard output (stdout).

	If PATTERN not found in FILE, it will print 'null'.
	The search only work if source FILE is in INI format.
</find>
<for>
</for>
<fw>
Usage: fw [ADDRESS]
* Look for information about an IP ADDRESS.

	This command uses API at 'http://ipinfo.io'.
</fw>
<gc>
Usage: gc
* Trigger Garbage Collector.
</gc>
<gaddr>
Usage: gaddr [DOMAIN]
* Resolve IP Address of DOMAIN.

	This command uses Cloudflare DNS (1.1.1.1), if it isn't avaliable it may not work.
</gaddr>
<gauge>
Usage: gauge [TEXT]
* Display an Alert for TEXT with a loading progress bar.
</gauge>
<genip>
Usage: genip
* Generate a random IP Address.
</genip>
<get>
Usage: get [FILE]
* Replace nano buffer by content of FILE.
</get>
<getopt>
Usage: getopt [TEXT]
* 
</getopt>
<getty>
Usage: getty
* Replace nano buffer by content of standard output (stdout).
</getty>
<gobuster>
Usage: gobuster [URL]
* Run GoBuster in URL

	GoBuster search for valid files and directories at a WebServer.
	Default wordlist file is '/java/etc/gobuster', if a file named as 'gobuster' is found at home and it isn't blank, GoBuster uses it. 
</gobuster>
<grep>
Usage: grep [FILE] [PATTERN]
* Look for PATTERN in FILE, print 'true' or 'false'.
</grep>
<hash>
Usage: hash [FILE]
* Print hash of FILE.
</hash>
<head>
Usage: head [FILE]
* Print first 10 lines of FILE.
</head>
<help>
Usage: help [PAGE]
* Display OpenTTY help.

	You can read specific help for commands 
</help>
<history>
Usage: history
* Display commands history of current session.
</history>
<hostname>
Usage: hostname
* Print MIDlet host name.

<hostid>
Usage: hostid
* Print MIDlet host id.

</hostid>
<htop>
Usage: htop
* Display Memory Usage Panel

	Button 'Refresh' triggers Garbage Collector.
</htop>
<http>
Usage: http [URL]
* Make a HTTP request into URL.

	
</http>
<html>
</html>
<if>
</if>
<ifconfig>
</ifconfig>
<import>
</import>
<install>
</install>
<java>
</java>
<kill>
</kill>
<locale>
</locale>
<login>
</login>
<log>
</log>
<logcat>
</logcat>
<logname>
</logname>
<logout>
</logout>
<ls>
</ls>
<lsblk>
</lsblk>
<mail>
</mail>
<mmspt>
</mmspt>
<mount>
</mount>
<nano>
</nano>
<nc>
</nc>
<netstat>
</netstat>
<open>
</open>
<org>
</org>
<ping>
</ping>
<pkg>
</pkg>
<pinc>
</pinc>
<ph2s>
</ph2s>
<pjnc>
</pjnc>
<pong>
</pong>
<prg>
</prg>
<prscan>
</prscan>
<proxy>
</proxy>
<ps>
</ps>
<pushd>
</pushd>
<pwd>
</pwd>
<query>
</query>
<raw>
</raw>
<read>
</read>
<report>
</report>
<rm>
</rm>
<rraw>
</rraw>
<run>
</run>
<sed>
</sed>
<server>
</server>
<set>
</set>
<sh>
</sh>
<sleep>
</sleep>
<start>
</start>
<stop>
</stop>
<tail>
</tail>
<tick>
</tick>
<time>
</time>
<title>
</title>
<top>
</top>
<touch>
</touch>
<trace>
</trace>
<trim>
</trim>
<true>
</true>
<tty>
</tty>
<ttysize>
</ttysize>
<uname>
</uname>
<unalias>
</unalias>
<unset>
</unset>
<uuid>
</uuid>
<vendor>
</vendor>
<version>
</version>
<view>
</view>
<vnt>
</vnt>
<warn>
</warn>
<wget>
</wget>
<whoami>
</whoami>
<wrl>
</wrl>
<x11>
</x11>
<xterm>
</xterm>